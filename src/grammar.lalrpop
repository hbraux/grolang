use std::str::FromStr;
use crate::ast::{Expr, Opcode, TRUE, FALSE, NULL};

// see https://lalrpop.github.io/lalrpop/tutorial/index.html

grammar;

pub Statement: Box<Expr>  = {
    "var" <s:Id> "=" <e:Expr>  => Box::new(Expr::Declare(s,e)),
    Expr
};

Expr: Box<Expr> = {
    <l:Expr> <o:ExprOp> <r:Factor> => Box::new(Expr::BinaryOp(l,o,r)),
    Factor,
    Literal
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    <l:Factor> <o:FactorOp> <r:Term> => Box::new(Expr::BinaryOp(l,o,r)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Literal: Box<Expr> = {
    "true" => Box::new(TRUE),
    "false" => Box::new(FALSE),
    "null" => Box::new(NULL),

}

Term: Box<Expr> = {
    <e:Int> => Box::new(Expr::Int(e)),
    <e:Float> => Box::new(Expr::Float(e)),
    <e:Str> => Box::new(Expr::Str(e)),
    <e:Id> => Box::new(Expr::Id(e)),
    "(" <Expr> ")"
};

Int: i64 = <s:r"-?\d+"> => i64::from_str(s).unwrap();

Float: f64 = <s:r"-?\d+\.\d*"> => f64::from_str(s).unwrap();

Str: String = <l:r#""[a-z ]*""#> => l[1..l.len()-1].into();

Id: String = <s:r"[A-Za-z][A-Za-z0-9]*"> => s.to_string();

