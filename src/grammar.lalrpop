use std::str::FromStr;
use crate::ast::{Expr, Opcode};

// see https://lalrpop.github.io/lalrpop/tutorial/index.html

grammar;

pub Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    Id => Box::new(Expr::Identifier(<>)),
    "(" <Expr> ")"
};

Num: f64 = {
    r"-?\d+(\.\d+)?" => f64::from_str(<>).unwrap()
 };

Id: String = <s:r"[A-Z][A-Z_0-9]*"> => s.to_string();

