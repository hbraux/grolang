use std::str::FromStr;
use crate::ast::{Expr, Opcode};

// see https://lalrpop.github.io/lalrpop/tutorial/index.html

grammar;

pub Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    <i:Int> => Box::new(Expr::Int(i)),
    <s:Id> => Box::new(Expr::Id(s)),
    "(" <Expr> ")"
};

Int: i64 = {
    <s:r"-?\d+"> => i64::from_str(s).unwrap()
 };

Id: String = <s:r"[A-Za-z][A-Za-z0-9]*"> => s.to_string();

