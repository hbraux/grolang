use std::str::FromStr;
use crate::ast::{Expr, Opcode};

// see https://lalrpop.github.io/lalrpop/tutorial/index.html

grammar;

pub Statement: Box<Expr>  = {
    "var" <s:Identifier> "=" <e:Expr>  => Box::new(Expr::Declare(s,e)),
    Expr
};

Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    <s:IntLiteral> => Box::new(Expr::Int(s)),
    <s:FloatLiteral> => Box::new(Expr::Float(s)),
    <s:StrLiteral> => Box::new(Expr::Str(s)),
    <s:Identifier> => Box::new(Expr::Id(s)),
    "(" <Expr> ")"
};

IntLiteral: i64 = <s:r"-?\d+"> => i64::from_str(s).unwrap();

FloatLiteral: f64 = <s:r"-?\d+\.\d*"> => f64::from_str(s).unwrap();

StrLiteral: String = <l:r#""[a-z ]*""#> => l[1..l.len()-1].into();

Identifier: String = <s:r"[A-Za-z][A-Za-z0-9]*"> => s.to_string();

