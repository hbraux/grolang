// Pest grammar: https://pest.rs/book/grammars/peg.html)

Special = { "true" | "false" | "null" }

Int = @{  "-"? ~ ASCII_DIGIT+  ~ ( "_" ~ ASCII_DIGIT+)* }
Float = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ ~ (^"e" ~ "-"? ~ ASCII_DIGIT+)? }

String = { "\"" ~ ( stringChar | escape )* ~ "\"" }
stringChar = _{ (!("\\" | "\"") ~ ANY) + }
escape     = _{ "\\" ~ ( "n" | "r" | "t" | "\\" | "\"" ) }

Symbol = @{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }

Literal = _{ Special | Float | Int | String  }
Pair = _{ Literal ~ ":" ~ LiteralOrCollection }

LiteralOrCollection = _{ Literal | List | Map }
List = { "[" ~ LiteralOrCollection? ~ ( "," ~ LiteralOrCollection )*  ~ "]" }
Map =  { "{" ~ Pair? ~ ( "," ~ Pair )*  ~ "}" }


Operator = _{ Add | Sub | Mul | Div | Mod | Exp | Eq | Neq | Le | Lt | Ge | Gt | And | Or }
    Add = { "+" }
    Sub = { "-" }
    Mul = { "*" }
    Div = { "/" }
    Mod = { "%" }
    Exp = { "^" }
    Eq = { "==" }
    Neq = { "!=" }
    Lt = { "<" }
    Le = { "<=" }
    Gt = { ">" }
    Ge = { ">=" }
    And = { "&&" }
    Or = { "||" }
Dot = { "." }

TypeSpec = @{ ":" ~ WHITESPACE* ~ Symbol ~ ( "<" ~ Symbol ~( "," ~ Symbol )? ~ ">")? }
Parameter = { Symbol ~ TypeSpec }

Expr = {  ChainCall | CallExpr | BinaryExpr  | Term  }
ChainCall = _{ Term ~ ( Dot ~ CallExpr )+  }
BinaryExpr = _{ Term ~ ( Operator ~ Term ) + }
CallExpr = { Symbol ~ "(" ~ Expr? ~ ( "," ~ Expr )* ~ ")" }
Term = _{ CallExpr | Parameters | LiteralOrCollection | Symbol |  "(" ~ Expr ~ ")"  | Block }

VarType = { "var" | "val" }
Declaration = { VarType ~ Symbol ~ TypeSpec? ~ "=" ~ Expr }

Parameters = { "(" ~ Parameter? ~ ( "," ~ Parameter )* ~ ")" }
Definition = { "fun" ~ Symbol ~ Parameters ~ TypeSpec ~ "=" ~ ( Expr | Block) }
Assignment = { Symbol ~ "=" ~ Expr }

Block = { "{" ~ NEWLINE* ~ Statement ~ ( (NEWLINE | ";") ~ Statement)* ~ NEWLINE* ~ "}" }
IfElse = { "if" ~ "(" ~ Expr ~ ")" ~ ( Expr | Block) ~ ( "else" ~ ( Expr | Block))? }
While = { "while" ~ "(" ~ Expr ~ ")" ~ Block  }
Statement = _{ Declaration | Definition | Assignment | IfElse | While | Expr }

equation = _{ SOI ~ Expr ~ EOI }
WHITESPACE = _{ " " }
COMMENT   = { "#" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
